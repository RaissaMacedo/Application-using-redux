{"ast":null,"code":"import { call, select, put, all, takeLatest } from 'redux-saga/effects'; // middleware\nimport { addReserveSuccess, updateAmountSuccess } from './actions';\nimport api from '../../../services/api';\n//generate\n//yield igual o  await\nfunction addToReserve(_ref) {\n  let {\n    id\n  } = _ref;\n  return function* () {\n    const tripExists = yield select(state => state.reserve.find(trip => trip.id === id));\n    const myStock = yield call(api.get, `/stock/${id}`);\n    const stockAmount = myStock.data.amount;\n    const currentStock = tripExists ? tripExists.amount : 0;\n    const amount = currentStock + 1;\n    if (amount > stockAmount) {\n      alert('Quantidade máxima atingida!');\n      return;\n    }\n    if (tripExists) {\n      yield put(updateAmountReserve(id, amount));\n    } else {\n      // fazendo a requisição\n      const response = yield call(api.get, `trips/${id}`);\n      const data = {\n        ...response.data,\n        amount: 1\n      };\n\n      // disparando essa action e passando para o reducer\n      yield put(addReserveSuccess(data));\n    }\n  }();\n}\nfunction updateAmount(_ref2) {\n  let {\n    id,\n    amount\n  } = _ref2;\n  return function* () {\n    if (amount <= 0) return;\n    const myStock = yield call(api.get, `trips/${id}`);\n    const stockAmount = myStock.data.amount;\n    if (amont > stockAmount) {\n      alert('Quantidade máxima atingida');\n      return;\n    }\n    yield put(updateAmountSuccess(id, amount));\n  }();\n}\n// se cliclar 2 vezes e ainda não tiver terminando a primeira requisição\n// ele só vai pegar a ultima requsição\nexport default all([takeLatest('ADD_RESERVE_REQUEST', addToReserve), takeLatest('UPDATE_RESERVE_REQUEST', updateAmount)]);","map":{"version":3,"names":["call","select","put","all","takeLatest","addReserveSuccess","updateAmountSuccess","api","addToReserve","_ref","id","tripExists","state","reserve","find","trip","myStock","get","stockAmount","data","amount","currentStock","alert","updateAmountReserve","response","updateAmount","_ref2","amont"],"sources":["/home/raissa/Documentos/Projetos-dev/REACT/Redux/src/store/modules/reserve/sagas.js"],"sourcesContent":["import { call, select, put, all, takeLatest } from 'redux-saga/effects'; // middleware\nimport { addReserveSuccess, updateAmountSuccess } from './actions';\nimport api from '../../../services/api';\n//generate\n//yield igual o  await\nfunction* addToReserve({ id }) {\n  const tripExists = yield select((state) =>\n    state.reserve.find((trip) => trip.id === id),\n  );\n  const myStock = yield call(api.get, `/stock/${id}`);\n\n  const stockAmount = myStock.data.amount;\n\n  const currentStock = tripExists ? tripExists.amount : 0;\n\n  const amount = currentStock + 1;\n\n  if (amount > stockAmount) {\n    alert('Quantidade máxima atingida!');\n    return;\n  }\n\n  if (tripExists) {\n    yield put(updateAmountReserve(id, amount));\n  } else {\n    // fazendo a requisição\n    const response = yield call(api.get, `trips/${id}`);\n\n    const data = {\n      ...response.data,\n      amount: 1,\n    };\n\n    // disparando essa action e passando para o reducer\n    yield put(addReserveSuccess(data));\n  }\n}\n\nfunction* updateAmount({ id, amount }) {\n  if (amount <= 0) return;\n  const myStock = yield call(api.get, `trips/${id}`);\n\n  const stockAmount = myStock.data.amount;\n\n  if (amont > stockAmount) {\n    alert('Quantidade máxima atingida');\n    return;\n  }\n\n  yield put(updateAmountSuccess(id, amount));\n}\n// se cliclar 2 vezes e ainda não tiver terminando a primeira requisição\n// ele só vai pegar a ultima requsição\nexport default all([\n  takeLatest('ADD_RESERVE_REQUEST', addToReserve),\n  takeLatest('UPDATE_RESERVE_REQUEST', updateAmount),\n]);\n"],"mappings":"AAAA,SAASA,IAAI,EAAEC,MAAM,EAAEC,GAAG,EAAEC,GAAG,EAAEC,UAAU,QAAQ,oBAAoB,CAAC,CAAC;AACzE,SAASC,iBAAiB,EAAEC,mBAAmB,QAAQ,WAAW;AAClE,OAAOC,GAAG,MAAM,uBAAuB;AACvC;AACA;AACA,SAAUC,YAAYA,CAAAC,IAAA;EAAA,IAAC;IAAEC;EAAG,CAAC,GAAAD,IAAA;EAAA,oBAAE;IAC7B,MAAME,UAAU,GAAG,MAAMV,MAAM,CAAEW,KAAK,IACpCA,KAAK,CAACC,OAAO,CAACC,IAAI,CAAEC,IAAI,IAAKA,IAAI,CAACL,EAAE,KAAKA,EAAE,CAAC,CAC7C;IACD,MAAMM,OAAO,GAAG,MAAMhB,IAAI,CAACO,GAAG,CAACU,GAAG,EAAG,UAASP,EAAG,EAAC,CAAC;IAEnD,MAAMQ,WAAW,GAAGF,OAAO,CAACG,IAAI,CAACC,MAAM;IAEvC,MAAMC,YAAY,GAAGV,UAAU,GAAGA,UAAU,CAACS,MAAM,GAAG,CAAC;IAEvD,MAAMA,MAAM,GAAGC,YAAY,GAAG,CAAC;IAE/B,IAAID,MAAM,GAAGF,WAAW,EAAE;MACxBI,KAAK,CAAC,6BAA6B,CAAC;MACpC;IACF;IAEA,IAAIX,UAAU,EAAE;MACd,MAAMT,GAAG,CAACqB,mBAAmB,CAACb,EAAE,EAAEU,MAAM,CAAC,CAAC;IAC5C,CAAC,MAAM;MACL;MACA,MAAMI,QAAQ,GAAG,MAAMxB,IAAI,CAACO,GAAG,CAACU,GAAG,EAAG,SAAQP,EAAG,EAAC,CAAC;MAEnD,MAAMS,IAAI,GAAG;QACX,GAAGK,QAAQ,CAACL,IAAI;QAChBC,MAAM,EAAE;MACV,CAAC;;MAED;MACA,MAAMlB,GAAG,CAACG,iBAAiB,CAACc,IAAI,CAAC,CAAC;IACpC;EACF,CAAC;AAAA;AAED,SAAUM,YAAYA,CAAAC,KAAA;EAAA,IAAC;IAAEhB,EAAE;IAAEU;EAAO,CAAC,GAAAM,KAAA;EAAA,oBAAE;IACrC,IAAIN,MAAM,IAAI,CAAC,EAAE;IACjB,MAAMJ,OAAO,GAAG,MAAMhB,IAAI,CAACO,GAAG,CAACU,GAAG,EAAG,SAAQP,EAAG,EAAC,CAAC;IAElD,MAAMQ,WAAW,GAAGF,OAAO,CAACG,IAAI,CAACC,MAAM;IAEvC,IAAIO,KAAK,GAAGT,WAAW,EAAE;MACvBI,KAAK,CAAC,4BAA4B,CAAC;MACnC;IACF;IAEA,MAAMpB,GAAG,CAACI,mBAAmB,CAACI,EAAE,EAAEU,MAAM,CAAC,CAAC;EAC5C,CAAC;AAAA;AACD;AACA;AACA,eAAejB,GAAG,CAAC,CACjBC,UAAU,CAAC,qBAAqB,EAAEI,YAAY,CAAC,EAC/CJ,UAAU,CAAC,wBAAwB,EAAEqB,YAAY,CAAC,CACnD,CAAC"},"metadata":{},"sourceType":"module","externalDependencies":[]}